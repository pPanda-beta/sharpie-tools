plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.ajoberstar.grgit' version '1.7.2'
    id 'org.ajoberstar.release-opinion' version '1.7.2'
}

group 'ppanda.sharpie'

ext {
    artifactName = 'interface-wrapper-runtime'
    binTrayUserName = findProperty("bintrayUserName")
    bintrayApiToken = findProperty("bintrayApiToken")
    signingKey = findProperty("signingKey")
    signingPassword = findProperty("signingPassword")
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = artifactName
            pom {
                name = 'Interface Wrapper Runtime'
                description = 'Runtime components for Interface Wrapper'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'ppanda-beta'
                        name = 'Palash Das'
                        email = 'dpalash.new@gmail.com'
                    }
                }
            }

        }
    }

    repositories {
        maven {
            name "jCenter"
            url = "https://api.bintray.com/maven/${binTrayUserName}/maven/${artifactName}/;publish=1"
            credentials {
                username = binTrayUserName
                password = bintrayApiToken
            }
        }
    }
}

private void deleteArtifactVersion(versionId, stopOnFail = true) {
    def artifactLocation = "https://api.bintray.com/packages/${binTrayUserName}/maven/${artifactName}/versions/${versionId}"
    def basicAuthHeader = "Basic " + Base64.getEncoder().encodeToString((binTrayUserName + ":" + bintrayApiToken).getBytes())
    def deleteConnection = new URL(artifactLocation).openConnection();
    deleteConnection.setRequestMethod("DELETE")
    deleteConnection.setRequestProperty("Authorization", basicAuthHeader)
    deleteConnection.setDoOutput(true)
    deleteConnection.getOutputStream().flush()
    if (deleteConnection.getResponseCode().equals(200)) {
        println("Successfully deleted artifact " + deleteConnection.getInputStream().getText())
    } else if (stopOnFail) {
        throw new StopActionException("Failed to delete artifact " + deleteConnection.getInputStream().getText())
    }
}

task removeCurrentVersionIfExists {
    doFirst {
        deleteArtifactVersion(version, false)
    }
}
publishMavenJavaPublicationToJCenterRepository.dependsOn(removeCurrentVersionIfExists)

task removePoisonousMavenMetadataBasedFakeVersion {
    doLast {
        deleteArtifactVersion(artifactName)
    }
}

publishMavenJavaPublicationToJCenterRepository.finalizedBy(removePoisonousMavenMetadataBasedFakeVersion)

signing {
    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications.mavenJava
}
